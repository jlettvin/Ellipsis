___Competency in many difficult-to-master software languages is
required when writing a scientific paper.
Separate languages are needed for generating and displaying
equations, plots, charts, graphs, images, listings, tables.
The Xenofile principle is to offer the ease of each language
while hiding the tricky bits in specialty service modules.

___In this paper, we illustrate the use of this ellipsis library
with demonstrations of several of these specialty languages.
For instance, we show the use of
gnuplot and graphviz through service modules.

=== Development cycle
___Software engineers consider the development cycle to be costly
and use special tools and automation to facilitate rapid generation.
These efforts are focused primarily on their own needs,
but these efforts are quite productive when put in service to
groups having similar needs, like scientific authors.

___Ellipsis, this library, reduces the writer's development cycle
to writing text and including efficient calls to simplified services
to generate and organize the images to accompany the text.
The development cycle consists of two steps: edit and refresh.
The developer uses their favorite text editor to improve their source
then refreshes a browser window on the improved source.
The cycle is tight and rapid.

=== Examples
___Here are two examples of image inclusions made possible
by application of the xenofile principle.
The first and third are an ancient Greek theorem.
The second and fourth are plots.
`equation.quadratic|the quadratic formula|-b \pm \sqrt{b^2 - 4ac} \over 2a`
`gnuplot.cos|cos(x) and sin(x)|{width="256" height="256"}plot cos(x) lw 3,sin(x) lw 3`
`equation.Euler|Euler's identity|e^{i\pi}+1=0`
`gnuplot.Airy|Airy(x,y)|
{width="256" height="256"}radius(a,x,y)=pi*sqrt((a*x)**2+(a*y)**2);
wave(a,x,y)=2*besj1(radius(a,x,y))/(radius(a,x,y));
Airy(a,x,y)=wave(a,x,y)**2;
cubeAiry(a,x)=10*Airy(a,x,0)*(a*x)**3;
set xrange[-4.22:4.22]; set yrange[-4.22:4.22]; set zrange[0:1];
set isosamples 101,101; set pm3d at b; splot Airy(1,x,y);
`

=== meta highlighting
___Software engineers use syntax highlighting
to discriminate between content of different types.
In Ellipsis we use both intensity and color to mark
objects apart from content; blocks of information
that are not part of the paper, but act as a sticky note
with language usage instructions and reminders the user wishes to place.
This is meta-data, not part of the actual paper, but useful while writing.

=== backticks
___Backticks are used to execute xenofile service calls.
Instructions to an external service are enclosed in backticks.
A service name by itself
shows the default values used in the service
which may be overridden by the writer.
A service name followed by a question mark
shows a miniature usage manual page for the service.
A service name followed by a question mark then text
shows a reminder to the user to develop further.
A service name followed by a period and an id
uses the id to lookup the name of the service instance
(such as &#x60;equation.Euler&#x60;) is a reference to
an equation identified by the id.
A service name followed by a period, an id, a vertical bar, a label,
a vertical bar and plotting instructions causes immediate generation
of the plot and its inclusion in the paper at that location.
Each of these will be illustrated with examples under Methods.

___Non-paper, meta-output, will be off-white boxes.
For instances, defaults are shown in gray,
reminders are shown in light red,
service documentation is shown in light cyan,
and lists of service names are shown in light green.

___Security concerns in PHP typically involve
the use of data input through the server interface
to access functionality on the host machine.
Ellipsis does not allow input through the web interface.
So, the writer is responsible for all their own code
and can only achieve the same amount of damage they usually can,
but they need not worry about a hacker using the interface.
